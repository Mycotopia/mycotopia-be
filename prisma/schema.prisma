// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Main user model.
model User {
  id             String          @id @default(cuid())
  userId         String          @unique
  firstName      String
  lastName       String
  email          String          @unique
  password       String
  emailVerified  Boolean         @default(false)
  isVerifiedUser     Boolean         @default(false)
  isBanned       Boolean         @default(false)
  profile        Profile?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  signUpMetadata SignUpMetadata?
  UserSessions   UserSessions[]
  Posts          Posts[]
  Recipe         Recipe[]
  MediaFiles     MediaFiles[]

  @@index([id, userId])
}

// Contains user's profile data.
model Profile {
  id             String   @id @default(uuid())
  user           User     @relation(fields: [userId], references: [id])
  desctiption    String   @default("")
  country        String?
  profilePicture String?
  userId         String
  unit           Units    @default(METRIC)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

// Created when the user signs up.
model SignUpMetadata {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  ipAddress String
  userAgent String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

// Created when a user logs in.
model UserSessions {
  id        String   @id @default(uuid())
  token     String
  isValid   Boolean  @default(true)
  ipAddress String
  userAgent String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

// Unit of measurement.
enum Units {
  IMPERIAL
  METRIC
}

// Media file types.
enum MediaFileType {
  AVATAR
  IMAGE
  VIDEO
}

// Media files (for all media files)
model MediaFiles {
  id         String        @id @default(uuid())
  fileType   MediaFileType
  metafields Json?
  user       User          @relation(fields: [userId], references: [id])
  Posts      Posts[]
  Recipe     Recipe[]
  userId     String
}

// User posts
model Posts {
  id           String     @id @default(cuid())
  description  String
  metafields   Json?
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  media        MediaFiles @relation(fields: [mediaFilesId], references: [id])
  mediaFilesId String
}

// User recipes
model Recipe {
  id           String     @id @default(cuid())
  title        String
  body         String
  images       Json?
  metafields   Json?
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  media        MediaFiles @relation(fields: [mediaFilesId], references: [id])
  mediaFilesId String
}
