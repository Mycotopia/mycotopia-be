// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Main user model.
model User {
  id               String          @id @default(cuid())
  user_id          String          @unique
  first_name       String
  last_name        String
  email            String          @unique
  password         String
  email_verified   Boolean         @default(false)
  is_verified_user Boolean         @default(false)
  is_banned        Boolean         @default(false)
  profile          Profile?
  created_at       DateTime        @default(now())
  updated_at       DateTime        @updatedAt
  sign_up_metadata SignUpMetadata?
  user_sessions    UserSessions[]
  posts            Posts[]
  recipe           Recipe[]
  media_files      MediaFiles[]

  @@index([id, user_id])
}

// Contains user's profile data.
model Profile {
  id              String   @id @default(uuid())
  user            User     @relation(fields: [user_id], references: [id])
  desctiption     String   @default("")
  country         String?
  profile_picture String?
  user_id         String
  unit            Units    @default(METRIC)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
}

// Created when the user signs up.
model SignUpMetadata {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  ip_address String
  user_agent String
  user       User     @relation(fields: [user_id], references: [id])
  user_id    String
}

// Created when a user logs in.
model UserSessions {
  id         String   @id @default(uuid())
  token      String   @unique
  is_valid   Boolean  @default(true)
  ip_address String
  user_agent String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [user_id], references: [id])
  user_id    String
}

// Unit of measurement.
enum Units {
  IMPERIAL
  METRIC
}

// Media file types.
enum MediaFileType {
  AVATAR
  IMAGE
  VIDEO
}

// Media files (for all media files)
model MediaFiles {
  id         String        @id @default(uuid())
  file_type  MediaFileType
  metafields Json?
  user       User          @relation(fields: [user_id], references: [id])
  posts      Posts[]
  recipe     Recipe[]
  user_id    String
}

// User posts
model Posts {
  id             String     @id @default(cuid())
  description    String
  metafields     Json?
  user           User       @relation(fields: [user_id], references: [id])
  user_id        String
  media          MediaFiles @relation(fields: [media_files_id], references: [id])
  media_files_id String
}

// User recipes
model Recipe {
  id             String     @id @default(cuid())
  title          String
  body           String
  images         Json?
  metafields     Json?
  user           User       @relation(fields: [user_id], references: [id])
  user_id        String
  media          MediaFiles @relation(fields: [media_files_id], references: [id])
  media_files_id String
}
